1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。
    使用连接（JOIN）来代替子查询(Sub-Queries)
    选取最适用的字段属性
    使用联合(UNION)来代替手动创建的临时表
    事务
2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：
　　select id from t where num is null
　　可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：
　　select id from t where num=0

3.应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。

4.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：

　　select id from t where num=10 or num=20
　　可以这样查询：
　　select id from t where num=10
　　union all
　　select id from t where num=20

5.in 和 not in 也要慎用，否则会导致全表扫描，如：
　　select id from t where num in(1,2,3)
　　对于连续的数值，能用 between 就不要用 in 了：
　　select id from t where num between 1 and 3

6.下面的查询也将导致全表扫描：
　　select id from t where name like '%abc%'

7.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：
　　select id from t where num/2=100
　　应改为:
　　select id from t where num=100*2

8.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：
　　select id from t where substring(name,1,3)='abc'--name以abc开头的id
　　应改为:
　　select id from t where name like 'abc%'

9.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。

10.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。

11.不要写一些没有意义的查询，如需要生成一个空表结构：
　　select col1,col2 into #t from t where 1=0
　　这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：
　　create table #t(...)

12.很多时候用 exists 代替 in 是一个好的选择：

　　select num from a where num in(select num from b)
　　用下面的语句替换：
　　select num from a where exists(select 1 from b where num=a.num)

13.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。

14.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。

15.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。

16.尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。

17.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。

18.避免频繁创建和删除临时表，以减少系统表资源的消耗。

19.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，当需要重复引用大型表或常用表中的某个数据集时。但是,对于一次性事件，最好使用导出表。

20.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。

21.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。

22.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。

23.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。

24.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。
    在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。

25.尽量避免大事务操作，提高系统并发能力。

26.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。

27.mysql中给text字段创建索bai引有以下两种方法:（前提是表引擎应该是MyISAM的）

28.mysql在使用like查询的时候只有使用后面的%时，才会使用到索引。

29.PRIMARY, INDEX, UNIQUE 这3种是一类
   PRIMARY 主键。 就是 唯一 且 不能为空。
   INDEX 索引，普通的
   UNIQUE 唯一索引。 不允许有重复。
   FULLTEXT 是全文索引，用于在一篇文章中，检索文本信息的。alter table tablename ADD FULLTEXT username(column);
   MYSQL的索引类型：PRIMARY, INDEX,UNIQUE,FULLTEXT,SPAIAL(空间索引 GIS使用)
30.Mysql四种常见数据库引擎
    InnoDB存储引擎
    默认的MySQL引擎,事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键,提供了具有提交、回滚和崩溃恢复能力的事物安全（ACID兼容）存储引擎  四大特性 插入缓冲（insert buffer)二次写(double write)自适应哈希索引(ahi)预读(read ahead)
    MyISAM存储引擎
    基于ISAM存储引擎，并对其进行扩展,拥有较高的插入、查询速度，但不支持事物,每个MyISAM表最大索引数是64，这可以通过重新编译来改变。每个索引最大的列数是16,BLOB和TEXT列可以被索引,NULL被允许在索引的列中，这个值占每个键的0~1个字节,所有数字键值以高字节优先被存储以允许一个更高的索引压缩,每个MyISAM类型的表都有一个AUTO_INCREMENT的内部列，当INSERT和UPDATE操作的时候该列被更新，同时AUTO_INCREMENT列将被刷新。所以说，MyISAM类型表的AUTO_INCREMENT列更新比InnoDB类型的AUTO_INCREMENT更快
    MEMORY存储引擎
    MEMORY表的每个表可以有多达32个索引，每个索引16列，以及500字节的最大键长度,MEMORY存储引擎执行HASH和BTREE缩影,MEMORY表内存被存储在内存中，内存是MEMORY表和服务器在查询处理时的空闲中，创建的内部表共享,当不再需要MEMORY表的内容时，要释放被MEMORY表使用的内存，应该执行DELETE FROM或TRUNCATE TABLE，或者删除整个表（使用DROP TABLE）
    Archive存储引擎
    如果只有INSERT和SELECT操作，可以选择Archive，Archive支持高并发的插入操作，但是本身不是事务安全的。Archive非常适合存储归档数据，如记录日志信息可以使用Archive
    综上
    如果要提供提交、回滚、崩溃恢复能力的事物安全（ACID兼容）能力，并要求实现并发控制，InnoDB是一个好的选择
    如果数据表主要用来插入和查询记录，则MyISAM引擎能提供较高的处理效率
    如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存中的Memory引擎，MySQL中使用该引擎作为临时表，存放查询的中间结果
    如果只有INSERT和SELECT操作，可以选择Archive，Archive支持高并发的插入操作，但是本身不是事务安全的。Archive非常适合存储归档数据，如记录日志信息可以使用Archive
    InnoDB是聚集索引，支持事务，支持行级锁；MyISAM是非聚集索引，不支持事务，只支持表级锁。

31.调试查询语句
    EXPLAIN为您提供不同的查询属性。 在分析查询时，应注意以下属性。
    possible_keys :显示适用于查询的索引
    key :用来查找记录的键。 NULL值表示没有用于线性查询和SQL搜索的键，最终需要很长时间。
    rows :结果行数较少的SQL查询非常有效。 人们应该始终尝试改进查询，并避免使用通用查询clouse。 在大量记录上执行时，查询性能非常明显。
    type :是“联接类型”。 Ref表示从表中读取所有具有匹配索引值的行； All表示全表扫描
32.Mysql中InnoDB支持的四种事务transaction隔离级别名称，以及逐级之间的区别
   SQL标准定义的四个隔离级别为：
    read uncommited ：读到未提交数据
    read committed：脏读，不可重复读
    repeatable read：可重读
    serializable ：串行事物
33.事务特性ACID：
   （1）原子性Atomicity：即不可分割性，事务要么全部被执行，要么就全部不被执行。
   （2）一致性或可串性Consistency。事务的执行使得数据库从一种正确状态转换成另一种正确状态
   （3）隔离性Isolation。在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务，
   （4）持久性Durability。事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存。
34.mysql的主从复制
    MySQL主从复制是其最重要的功能之一。主从复制是指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数据自动复制到从服务器之中。主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。
    MySQL主从复制的两种情况：同步复制和异步复制，实际复制架构中大部分为异步复制。
35.数据库乐观锁和悲观锁
    悲观锁（Pessimistic Lock），顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。Java synchronized 就属于悲观锁的一种实现，每次线程要修改数据时都先获得锁，保证同一时刻只有一个线程能操作数据，其他线程则会被block。
    乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。
    乐观锁一般来说有以下2种方式：
    使用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。
    使用时间戳（timestamp）。乐观锁定的第二种实现方式和第一种差不多，同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳（timestamp）, 和上面的version类似，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是版本冲突。
36.事务级别
    未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据。
    提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)。
    可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读。
    串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。
37.数据库索引底层是B+树实现的,隐式转换会导致索引失效   隐式转换 where varchar = 123;把字符串转换数字了
38.数据库水平切分与垂直切分
    水平切分 通过时间来划分表
    垂直切分 指标不同表不通
39.JDBC中如何进行事务处理
    Connection提供了事务处理的方法，通过调用setAutoCommit(false)可以设置手动提交事务；当事务完成后用commit()显式提交事务；如果在事务处理过程中发生异常则通过rollback()进行事务回滚。除此之外，从JDBC 3.0中还引入了Savepoint（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。
    Springboot内部提供的事务管理器是根据autoconfigure来进行决定的。
    pom中加入了spring-boot-starter-data-jpa,Springboot会构造一个JpaTransactionManager这个事务管理器。
    pom中加入了spring-boot-starter-jdbc,Springboot会构造一个DataSourceTransactionManager这个事务管理器。
    都使用了Spring提供的PlatformTransactionManager接口  接口中策略HibernateTransactionManager,DataSourceTransactionManager,JtaTransactionManager,JpaTransactionManager



